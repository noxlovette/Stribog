// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/sqlc/querier.go
//
// Generated by this command:
//
//	mockgen -source=internal/db/sqlc/querier.go -destination=internal/db/sqlc/mock/querier_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	db "stribog/internal/db/sqlc"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CheckAdminAccess mocks base method.
func (m *MockQuerier) CheckAdminAccess(ctx context.Context, arg db.CheckAdminAccessParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAdminAccess", ctx, arg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAdminAccess indicates an expected call of CheckAdminAccess.
func (mr *MockQuerierMockRecorder) CheckAdminAccess(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAdminAccess", reflect.TypeOf((*MockQuerier)(nil).CheckAdminAccess), ctx, arg)
}

// CheckEmailExists mocks base method.
func (m *MockQuerier) CheckEmailExists(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmailExists", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEmailExists indicates an expected call of CheckEmailExists.
func (mr *MockQuerierMockRecorder) CheckEmailExists(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmailExists", reflect.TypeOf((*MockQuerier)(nil).CheckEmailExists), ctx, email)
}

// CheckReadAccess mocks base method.
func (m *MockQuerier) CheckReadAccess(ctx context.Context, arg db.CheckReadAccessParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckReadAccess", ctx, arg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckReadAccess indicates an expected call of CheckReadAccess.
func (mr *MockQuerierMockRecorder) CheckReadAccess(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckReadAccess", reflect.TypeOf((*MockQuerier)(nil).CheckReadAccess), ctx, arg)
}

// CheckWriteAccess mocks base method.
func (m *MockQuerier) CheckWriteAccess(ctx context.Context, arg db.CheckWriteAccessParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckWriteAccess", ctx, arg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckWriteAccess indicates an expected call of CheckWriteAccess.
func (mr *MockQuerierMockRecorder) CheckWriteAccess(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckWriteAccess", reflect.TypeOf((*MockQuerier)(nil).CheckWriteAccess), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, arg db.CreateUserParams) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, arg)
}

// DeleteAndInsertTags mocks base method.
func (m *MockQuerier) DeleteAndInsertTags(ctx context.Context, sparkID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAndInsertTags", ctx, sparkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAndInsertTags indicates an expected call of DeleteAndInsertTags.
func (mr *MockQuerierMockRecorder) DeleteAndInsertTags(ctx, sparkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAndInsertTags", reflect.TypeOf((*MockQuerier)(nil).DeleteAndInsertTags), ctx, sparkID)
}

// DeleteForge mocks base method.
func (m *MockQuerier) DeleteForge(ctx context.Context, arg db.DeleteForgeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForge", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteForge indicates an expected call of DeleteForge.
func (mr *MockQuerierMockRecorder) DeleteForge(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForge", reflect.TypeOf((*MockQuerier)(nil).DeleteForge), ctx, arg)
}

// DeleteForgeAccess mocks base method.
func (m *MockQuerier) DeleteForgeAccess(ctx context.Context, arg db.DeleteForgeAccessParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForgeAccess", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteForgeAccess indicates an expected call of DeleteForgeAccess.
func (mr *MockQuerierMockRecorder) DeleteForgeAccess(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForgeAccess", reflect.TypeOf((*MockQuerier)(nil).DeleteForgeAccess), ctx, arg)
}

// DeleteSparkAndCheckAdminAccess mocks base method.
func (m *MockQuerier) DeleteSparkAndCheckAdminAccess(ctx context.Context, arg db.DeleteSparkAndCheckAdminAccessParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSparkAndCheckAdminAccess", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSparkAndCheckAdminAccess indicates an expected call of DeleteSparkAndCheckAdminAccess.
func (mr *MockQuerierMockRecorder) DeleteSparkAndCheckAdminAccess(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSparkAndCheckAdminAccess", reflect.TypeOf((*MockQuerier)(nil).DeleteSparkAndCheckAdminAccess), ctx, arg)
}

// DeleteTags mocks base method.
func (m *MockQuerier) DeleteTags(ctx context.Context, sparkID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTags", ctx, sparkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTags indicates an expected call of DeleteTags.
func (mr *MockQuerierMockRecorder) DeleteTags(ctx, sparkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTags", reflect.TypeOf((*MockQuerier)(nil).DeleteTags), ctx, sparkID)
}

// DeleteUser mocks base method.
func (m *MockQuerier) DeleteUser(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockQuerierMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockQuerier)(nil).DeleteUser), ctx, id)
}

// GetForgeAndCheckReadAccess mocks base method.
func (m *MockQuerier) GetForgeAndCheckReadAccess(ctx context.Context, arg db.GetForgeAndCheckReadAccessParams) (db.GetForgeAndCheckReadAccessRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForgeAndCheckReadAccess", ctx, arg)
	ret0, _ := ret[0].(db.GetForgeAndCheckReadAccessRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForgeAndCheckReadAccess indicates an expected call of GetForgeAndCheckReadAccess.
func (mr *MockQuerierMockRecorder) GetForgeAndCheckReadAccess(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForgeAndCheckReadAccess", reflect.TypeOf((*MockQuerier)(nil).GetForgeAndCheckReadAccess), ctx, arg)
}

// GetForgesAndCheckReadAccess mocks base method.
func (m *MockQuerier) GetForgesAndCheckReadAccess(ctx context.Context, ownerID uuid.UUID) ([]db.GetForgesAndCheckReadAccessRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForgesAndCheckReadAccess", ctx, ownerID)
	ret0, _ := ret[0].([]db.GetForgesAndCheckReadAccessRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForgesAndCheckReadAccess indicates an expected call of GetForgesAndCheckReadAccess.
func (mr *MockQuerierMockRecorder) GetForgesAndCheckReadAccess(ctx, ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForgesAndCheckReadAccess", reflect.TypeOf((*MockQuerier)(nil).GetForgesAndCheckReadAccess), ctx, ownerID)
}

// GetSparkAndCheckReadAccess mocks base method.
func (m *MockQuerier) GetSparkAndCheckReadAccess(ctx context.Context, arg db.GetSparkAndCheckReadAccessParams) (db.GetSparkAndCheckReadAccessRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSparkAndCheckReadAccess", ctx, arg)
	ret0, _ := ret[0].(db.GetSparkAndCheckReadAccessRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSparkAndCheckReadAccess indicates an expected call of GetSparkAndCheckReadAccess.
func (mr *MockQuerierMockRecorder) GetSparkAndCheckReadAccess(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSparkAndCheckReadAccess", reflect.TypeOf((*MockQuerier)(nil).GetSparkAndCheckReadAccess), ctx, arg)
}

// GetSparksByForgeIDAndCheckReadAccess mocks base method.
func (m *MockQuerier) GetSparksByForgeIDAndCheckReadAccess(ctx context.Context, arg db.GetSparksByForgeIDAndCheckReadAccessParams) ([]db.GetSparksByForgeIDAndCheckReadAccessRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSparksByForgeIDAndCheckReadAccess", ctx, arg)
	ret0, _ := ret[0].([]db.GetSparksByForgeIDAndCheckReadAccessRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSparksByForgeIDAndCheckReadAccess indicates an expected call of GetSparksByForgeIDAndCheckReadAccess.
func (mr *MockQuerierMockRecorder) GetSparksByForgeIDAndCheckReadAccess(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSparksByForgeIDAndCheckReadAccess", reflect.TypeOf((*MockQuerier)(nil).GetSparksByForgeIDAndCheckReadAccess), ctx, arg)
}

// GetSparksByOwnerIDAndCheckReadAccess mocks base method.
func (m *MockQuerier) GetSparksByOwnerIDAndCheckReadAccess(ctx context.Context, ownerID uuid.UUID) ([]db.GetSparksByOwnerIDAndCheckReadAccessRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSparksByOwnerIDAndCheckReadAccess", ctx, ownerID)
	ret0, _ := ret[0].([]db.GetSparksByOwnerIDAndCheckReadAccessRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSparksByOwnerIDAndCheckReadAccess indicates an expected call of GetSparksByOwnerIDAndCheckReadAccess.
func (mr *MockQuerierMockRecorder) GetSparksByOwnerIDAndCheckReadAccess(ctx, ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSparksByOwnerIDAndCheckReadAccess", reflect.TypeOf((*MockQuerier)(nil).GetSparksByOwnerIDAndCheckReadAccess), ctx, ownerID)
}

// GetTags mocks base method.
func (m *MockQuerier) GetTags(ctx context.Context, sparkID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", ctx, sparkID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockQuerierMockRecorder) GetTags(ctx, sparkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockQuerier)(nil).GetTags), ctx, sparkID)
}

// GetTagsForSparks mocks base method.
func (m *MockQuerier) GetTagsForSparks(ctx context.Context, dollar_1 []string) ([]db.SparkTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsForSparks", ctx, dollar_1)
	ret0, _ := ret[0].([]db.SparkTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsForSparks indicates an expected call of GetTagsForSparks.
func (mr *MockQuerierMockRecorder) GetTagsForSparks(ctx, dollar_1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsForSparks", reflect.TypeOf((*MockQuerier)(nil).GetTagsForSparks), ctx, dollar_1)
}

// GetUserByEmail mocks base method.
func (m *MockQuerier) GetUserByEmail(ctx context.Context, email string) (db.GetUserByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(db.GetUserByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockQuerierMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockQuerier)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockQuerier) GetUserByID(ctx context.Context, id uuid.UUID) (db.GetUserByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(db.GetUserByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockQuerierMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockQuerier)(nil).GetUserByID), ctx, id)
}

// InsertForge mocks base method.
func (m *MockQuerier) InsertForge(ctx context.Context, arg db.InsertForgeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertForge", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertForge indicates an expected call of InsertForge.
func (mr *MockQuerierMockRecorder) InsertForge(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertForge", reflect.TypeOf((*MockQuerier)(nil).InsertForge), ctx, arg)
}

// InsertSpark mocks base method.
func (m *MockQuerier) InsertSpark(ctx context.Context, arg db.InsertSparkParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSpark", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSpark indicates an expected call of InsertSpark.
func (mr *MockQuerierMockRecorder) InsertSpark(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSpark", reflect.TypeOf((*MockQuerier)(nil).InsertSpark), ctx, arg)
}

// ListForgeAccess mocks base method.
func (m *MockQuerier) ListForgeAccess(ctx context.Context, forgeID string) ([]db.ListForgeAccessRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForgeAccess", ctx, forgeID)
	ret0, _ := ret[0].([]db.ListForgeAccessRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForgeAccess indicates an expected call of ListForgeAccess.
func (mr *MockQuerierMockRecorder) ListForgeAccess(ctx, forgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForgeAccess", reflect.TypeOf((*MockQuerier)(nil).ListForgeAccess), ctx, forgeID)
}

// UpdateForgeAndCheckWriteAccess mocks base method.
func (m *MockQuerier) UpdateForgeAndCheckWriteAccess(ctx context.Context, arg db.UpdateForgeAndCheckWriteAccessParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateForgeAndCheckWriteAccess", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateForgeAndCheckWriteAccess indicates an expected call of UpdateForgeAndCheckWriteAccess.
func (mr *MockQuerierMockRecorder) UpdateForgeAndCheckWriteAccess(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateForgeAndCheckWriteAccess", reflect.TypeOf((*MockQuerier)(nil).UpdateForgeAndCheckWriteAccess), ctx, arg)
}

// UpdateSparkAndCheckWriteAccess mocks base method.
func (m *MockQuerier) UpdateSparkAndCheckWriteAccess(ctx context.Context, arg db.UpdateSparkAndCheckWriteAccessParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSparkAndCheckWriteAccess", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSparkAndCheckWriteAccess indicates an expected call of UpdateSparkAndCheckWriteAccess.
func (mr *MockQuerierMockRecorder) UpdateSparkAndCheckWriteAccess(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSparkAndCheckWriteAccess", reflect.TypeOf((*MockQuerier)(nil).UpdateSparkAndCheckWriteAccess), ctx, arg)
}

// UpdateUser mocks base method.
func (m *MockQuerier) UpdateUser(ctx context.Context, arg db.UpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockQuerierMockRecorder) UpdateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockQuerier)(nil).UpdateUser), ctx, arg)
}

// UpsertForgeAccess mocks base method.
func (m *MockQuerier) UpsertForgeAccess(ctx context.Context, arg db.UpsertForgeAccessParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertForgeAccess", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertForgeAccess indicates an expected call of UpsertForgeAccess.
func (mr *MockQuerierMockRecorder) UpsertForgeAccess(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertForgeAccess", reflect.TypeOf((*MockQuerier)(nil).UpsertForgeAccess), ctx, arg)
}
