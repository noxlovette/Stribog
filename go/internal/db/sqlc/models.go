// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type AccessRole string

const (
	AccessRoleViewer AccessRole = "viewer"
	AccessRoleEditor AccessRole = "editor"
	AccessRoleAdmin  AccessRole = "admin"
)

func (e *AccessRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccessRole(s)
	case string:
		*e = AccessRole(s)
	default:
		return fmt.Errorf("unsupported scan type for AccessRole: %T", src)
	}
	return nil
}

type NullAccessRole struct {
	AccessRole AccessRole
	Valid      bool // Valid is true if AccessRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccessRole) Scan(value interface{}) error {
	if value == nil {
		ns.AccessRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccessRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccessRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccessRole), nil
}

type ApiKey struct {
	ID         uuid.UUID
	ForgeID    string
	Title      string
	IsActive   bool
	CreatedAt  pgtype.Timestamptz
	LastUsedAt pgtype.Timestamptz
}

type Forge struct {
	ID          string
	Title       string
	Description *string
	OwnerID     uuid.UUID
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

type ForgeAccess struct {
	ID         uuid.UUID
	ForgeID    string
	UserID     uuid.UUID
	AccessRole AccessRole
	AddedBy    uuid.UUID
	CreatedAt  pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
	RevokedAt  pgtype.Timestamptz
}

type Spark struct {
	ID        string
	ForgeID   string
	Title     string
	Markdown  string
	OwnerID   uuid.UUID
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type User struct {
	ID           uuid.UUID
	Email        string
	PasswordHash string
	Name         *string
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	IsActive     bool
}
