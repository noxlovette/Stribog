// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: public.sql

package db

import (
	"context"
)

const getSparksByForgeIDPublic = `-- name: GetSparksByForgeIDPublic :many
SELECT
  s.id, s.title, s.markdown, s.slug,
  COALESCE(ARRAY_AGG(st.tag) FILTER (WHERE st.tag IS NOT NULL), '{}')::TEXT[] AS tags
FROM sparks s
JOIN forges f ON s.forge_id = f.id
LEFT JOIN spark_tags st ON st.spark_id = s.id
WHERE s.forge_id = $1
GROUP BY s.id, s.title, s.markdown, s.slug
ORDER BY s.updated_at DESC
`

type GetSparksByForgeIDPublicRow struct {
	ID       string
	Title    string
	Markdown string
	Slug     string
	Tags     []string
}

func (q *Queries) GetSparksByForgeIDPublic(ctx context.Context, forgeID string) ([]GetSparksByForgeIDPublicRow, error) {
	rows, err := q.db.Query(ctx, getSparksByForgeIDPublic, forgeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSparksByForgeIDPublicRow
	for rows.Next() {
		var i GetSparksByForgeIDPublicRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Markdown,
			&i.Slug,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
